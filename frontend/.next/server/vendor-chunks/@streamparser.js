"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@streamparser";
exports.ids = ["vendor-chunks/@streamparser"];
exports.modules = {

/***/ "(ssr)/./node_modules/@streamparser/json/dist/cjs/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@streamparser/json/dist/cjs/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenType = exports.utf8 = exports.JSONParser = exports.TokenParser = exports.Tokenizer = void 0;\nvar tokenizer_1 = __webpack_require__(/*! ./tokenizer */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/tokenizer.js\");\nObject.defineProperty(exports, \"Tokenizer\", ({ enumerable: true, get: function () { return tokenizer_1.default; } }));\nvar tokenparser_1 = __webpack_require__(/*! ./tokenparser */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/tokenparser.js\");\nObject.defineProperty(exports, \"TokenParser\", ({ enumerable: true, get: function () { return tokenparser_1.default; } }));\nvar jsonparser_1 = __webpack_require__(/*! ./jsonparser */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/jsonparser.js\");\nObject.defineProperty(exports, \"JSONParser\", ({ enumerable: true, get: function () { return jsonparser_1.default; } }));\nexports.utf8 = __webpack_require__(/*! ./utils/utf-8 */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/utf-8.js\");\nvar constants_1 = __webpack_require__(/*! ./utils/constants */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/constants.js\");\nObject.defineProperty(exports, \"TokenType\", ({ enumerable: true, get: function () { return constants_1.TokenType; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbXBhcnNlci9qc29uL2Rpc3QvY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixHQUFHLFlBQVksR0FBRyxrQkFBa0IsR0FBRyxtQkFBbUIsR0FBRyxpQkFBaUI7QUFDL0Ysa0JBQWtCLG1CQUFPLENBQUMsa0ZBQWE7QUFDdkMsNkNBQTRDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ25ILG9CQUFvQixtQkFBTyxDQUFDLHNGQUFlO0FBQzNDLCtDQUE4QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUN2SCxtQkFBbUIsbUJBQU8sQ0FBQyxvRkFBYztBQUN6Qyw4Q0FBNkMsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDckgsMEhBQXVDO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLDhGQUFtQjtBQUM3Qyw2Q0FBNEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3RyZWFtcGFyc2VyL2pzb24vZGlzdC9janMvaW5kZXguanM/MmUwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVG9rZW5UeXBlID0gZXhwb3J0cy51dGY4ID0gZXhwb3J0cy5KU09OUGFyc2VyID0gZXhwb3J0cy5Ub2tlblBhcnNlciA9IGV4cG9ydHMuVG9rZW5pemVyID0gdm9pZCAwO1xudmFyIHRva2VuaXplcl8xID0gcmVxdWlyZShcIi4vdG9rZW5pemVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG9rZW5pemVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0b2tlbml6ZXJfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHRva2VucGFyc2VyXzEgPSByZXF1aXJlKFwiLi90b2tlbnBhcnNlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRva2VuUGFyc2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0b2tlbnBhcnNlcl8xLmRlZmF1bHQ7IH0gfSk7XG52YXIganNvbnBhcnNlcl8xID0gcmVxdWlyZShcIi4vanNvbnBhcnNlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkpTT05QYXJzZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGpzb25wYXJzZXJfMS5kZWZhdWx0OyB9IH0pO1xuZXhwb3J0cy51dGY4ID0gcmVxdWlyZShcIi4vdXRpbHMvdXRmLThcIik7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi91dGlscy9jb25zdGFudHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb2tlblR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnN0YW50c18xLlRva2VuVHlwZTsgfSB9KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@streamparser/json/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@streamparser/json/dist/cjs/jsonparser.js":
/*!****************************************************************!*\
  !*** ./node_modules/@streamparser/json/dist/cjs/jsonparser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tokenizer_1 = __webpack_require__(/*! ./tokenizer */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/tokenizer.js\");\nconst tokenparser_1 = __webpack_require__(/*! ./tokenparser */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/tokenparser.js\");\nclass JSONParser {\n    constructor(opts = {}) {\n        this.tokenizer = new tokenizer_1.default(opts);\n        this.tokenParser = new tokenparser_1.default(opts);\n        this.tokenizer.onToken = this.tokenParser.write.bind(this.tokenParser);\n        this.tokenizer.onEnd = () => {\n            if (!this.tokenParser.isEnded)\n                this.tokenParser.end();\n        };\n        this.tokenParser.onError = this.tokenizer.error.bind(this.tokenizer);\n        this.tokenParser.onEnd = () => {\n            if (!this.tokenizer.isEnded)\n                this.tokenizer.end();\n        };\n    }\n    get isEnded() {\n        return this.tokenizer.isEnded && this.tokenParser.isEnded;\n    }\n    write(input) {\n        this.tokenizer.write(input);\n    }\n    end() {\n        this.tokenizer.end();\n    }\n    set onToken(cb) {\n        this.tokenizer.onToken = cb;\n    }\n    set onValue(cb) {\n        this.tokenParser.onValue = cb;\n    }\n    set onError(cb) {\n        this.tokenizer.onError = cb;\n    }\n    set onEnd(cb) {\n        this.tokenParser.onEnd = () => {\n            if (!this.tokenizer.isEnded)\n                this.tokenizer.end();\n            cb.call(this.tokenParser);\n        };\n    }\n}\nexports[\"default\"] = JSONParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbXBhcnNlci9qc29uL2Rpc3QvY2pzL2pzb25wYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWE7QUFDekMsc0JBQXNCLG1CQUFPLENBQUMsc0ZBQWU7QUFDN0M7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3RyZWFtcGFyc2VyL2pzb24vZGlzdC9janMvanNvbnBhcnNlci5qcz9lODVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdG9rZW5pemVyXzEgPSByZXF1aXJlKFwiLi90b2tlbml6ZXJcIik7XG5jb25zdCB0b2tlbnBhcnNlcl8xID0gcmVxdWlyZShcIi4vdG9rZW5wYXJzZXJcIik7XG5jbGFzcyBKU09OUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIgPSBuZXcgdG9rZW5pemVyXzEuZGVmYXVsdChvcHRzKTtcbiAgICAgICAgdGhpcy50b2tlblBhcnNlciA9IG5ldyB0b2tlbnBhcnNlcl8xLmRlZmF1bHQob3B0cyk7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLm9uVG9rZW4gPSB0aGlzLnRva2VuUGFyc2VyLndyaXRlLmJpbmQodGhpcy50b2tlblBhcnNlcik7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLm9uRW5kID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnRva2VuUGFyc2VyLmlzRW5kZWQpXG4gICAgICAgICAgICAgICAgdGhpcy50b2tlblBhcnNlci5lbmQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50b2tlblBhcnNlci5vbkVycm9yID0gdGhpcy50b2tlbml6ZXIuZXJyb3IuYmluZCh0aGlzLnRva2VuaXplcik7XG4gICAgICAgIHRoaXMudG9rZW5QYXJzZXIub25FbmQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudG9rZW5pemVyLmlzRW5kZWQpXG4gICAgICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIuZW5kKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldCBpc0VuZGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b2tlbml6ZXIuaXNFbmRlZCAmJiB0aGlzLnRva2VuUGFyc2VyLmlzRW5kZWQ7XG4gICAgfVxuICAgIHdyaXRlKGlucHV0KSB7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLndyaXRlKGlucHV0KTtcbiAgICB9XG4gICAgZW5kKCkge1xuICAgICAgICB0aGlzLnRva2VuaXplci5lbmQoKTtcbiAgICB9XG4gICAgc2V0IG9uVG9rZW4oY2IpIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIub25Ub2tlbiA9IGNiO1xuICAgIH1cbiAgICBzZXQgb25WYWx1ZShjYikge1xuICAgICAgICB0aGlzLnRva2VuUGFyc2VyLm9uVmFsdWUgPSBjYjtcbiAgICB9XG4gICAgc2V0IG9uRXJyb3IoY2IpIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIub25FcnJvciA9IGNiO1xuICAgIH1cbiAgICBzZXQgb25FbmQoY2IpIHtcbiAgICAgICAgdGhpcy50b2tlblBhcnNlci5vbkVuZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy50b2tlbml6ZXIuaXNFbmRlZClcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplci5lbmQoKTtcbiAgICAgICAgICAgIGNiLmNhbGwodGhpcy50b2tlblBhcnNlcik7XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gSlNPTlBhcnNlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@streamparser/json/dist/cjs/jsonparser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@streamparser/json/dist/cjs/tokenizer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@streamparser/json/dist/cjs/tokenizer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenizerError = void 0;\nconst utf_8_1 = __webpack_require__(/*! ./utils/utf-8 */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/utf-8.js\");\nconst bufferedString_1 = __webpack_require__(/*! ./utils/bufferedString */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/bufferedString.js\");\nconst constants_1 = __webpack_require__(/*! ./utils/constants */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/constants.js\");\nconst { LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET, COLON, COMMA, TRUE, FALSE, NULL, STRING, NUMBER, } = constants_1.TokenType;\n// Tokenizer States\nvar TokenizerStates;\n(function (TokenizerStates) {\n    TokenizerStates[TokenizerStates[\"START\"] = 0] = \"START\";\n    TokenizerStates[TokenizerStates[\"ENDED\"] = 1] = \"ENDED\";\n    TokenizerStates[TokenizerStates[\"ERROR\"] = 2] = \"ERROR\";\n    TokenizerStates[TokenizerStates[\"TRUE1\"] = 3] = \"TRUE1\";\n    TokenizerStates[TokenizerStates[\"TRUE2\"] = 4] = \"TRUE2\";\n    TokenizerStates[TokenizerStates[\"TRUE3\"] = 5] = \"TRUE3\";\n    TokenizerStates[TokenizerStates[\"FALSE1\"] = 6] = \"FALSE1\";\n    TokenizerStates[TokenizerStates[\"FALSE2\"] = 7] = \"FALSE2\";\n    TokenizerStates[TokenizerStates[\"FALSE3\"] = 8] = \"FALSE3\";\n    TokenizerStates[TokenizerStates[\"FALSE4\"] = 9] = \"FALSE4\";\n    TokenizerStates[TokenizerStates[\"NULL1\"] = 10] = \"NULL1\";\n    TokenizerStates[TokenizerStates[\"NULL2\"] = 11] = \"NULL2\";\n    TokenizerStates[TokenizerStates[\"NULL3\"] = 12] = \"NULL3\";\n    TokenizerStates[TokenizerStates[\"STRING_DEFAULT\"] = 13] = \"STRING_DEFAULT\";\n    TokenizerStates[TokenizerStates[\"STRING_AFTER_BACKSLASH\"] = 14] = \"STRING_AFTER_BACKSLASH\";\n    TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_1\"] = 15] = \"STRING_UNICODE_DIGIT_1\";\n    TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_2\"] = 16] = \"STRING_UNICODE_DIGIT_2\";\n    TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_3\"] = 17] = \"STRING_UNICODE_DIGIT_3\";\n    TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_4\"] = 18] = \"STRING_UNICODE_DIGIT_4\";\n    TokenizerStates[TokenizerStates[\"STRING_INCOMPLETE_CHAR\"] = 19] = \"STRING_INCOMPLETE_CHAR\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_INITIAL_MINUS\"] = 20] = \"NUMBER_AFTER_INITIAL_MINUS\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_INITIAL_ZERO\"] = 21] = \"NUMBER_AFTER_INITIAL_ZERO\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_INITIAL_NON_ZERO\"] = 22] = \"NUMBER_AFTER_INITIAL_NON_ZERO\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_FULL_STOP\"] = 23] = \"NUMBER_AFTER_FULL_STOP\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_DECIMAL\"] = 24] = \"NUMBER_AFTER_DECIMAL\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_E\"] = 25] = \"NUMBER_AFTER_E\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_E_AND_SIGN\"] = 26] = \"NUMBER_AFTER_E_AND_SIGN\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_E_AND_DIGIT\"] = 27] = \"NUMBER_AFTER_E_AND_DIGIT\";\n    TokenizerStates[TokenizerStates[\"SEPARATOR\"] = 28] = \"SEPARATOR\";\n})(TokenizerStates || (TokenizerStates = {}));\nconst defaultOpts = {\n    stringBufferSize: 0,\n    numberBufferSize: 0,\n    separator: undefined,\n};\nclass TokenizerError extends Error {\n    constructor(message) {\n        super(message);\n        // Typescript is broken. This is a workaround\n        Object.setPrototypeOf(this, TokenizerError.prototype);\n    }\n}\nexports.TokenizerError = TokenizerError;\nclass Tokenizer {\n    constructor(opts) {\n        this.state = TokenizerStates.START;\n        this.separatorIndex = 0;\n        this.unicode = undefined; // unicode escapes\n        this.highSurrogate = undefined;\n        this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n        this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n        this.char_split_buffer = new Uint8Array(4); // for rebuilding chars split before boundary is reached\n        this.encoder = new TextEncoder();\n        this.offset = -1;\n        opts = Object.assign(Object.assign({}, defaultOpts), opts);\n        this.bufferedString =\n            opts.stringBufferSize && opts.stringBufferSize > 4\n                ? new bufferedString_1.BufferedString(opts.stringBufferSize)\n                : new bufferedString_1.NonBufferedString();\n        this.bufferedNumber =\n            opts.numberBufferSize && opts.numberBufferSize > 0\n                ? new bufferedString_1.BufferedString(opts.numberBufferSize)\n                : new bufferedString_1.NonBufferedString();\n        this.separator = opts.separator;\n        this.separatorBytes = opts.separator\n            ? this.encoder.encode(opts.separator)\n            : undefined;\n    }\n    get isEnded() {\n        return this.state === TokenizerStates.ENDED;\n    }\n    write(input) {\n        let buffer;\n        if (input instanceof Uint8Array) {\n            buffer = input;\n        }\n        else if (typeof input === \"string\") {\n            buffer = this.encoder.encode(input);\n        }\n        else if ((typeof input === \"object\" && \"buffer\" in input) ||\n            Array.isArray(input)) {\n            buffer = Uint8Array.from(input);\n        }\n        else {\n            this.error(new TypeError(\"Unexpected type. The `write` function only accepts Arrays, TypedArrays and Strings.\"));\n            return;\n        }\n        for (let i = 0; i < buffer.length; i += 1) {\n            const n = buffer[i]; // get current byte from buffer\n            switch (this.state) {\n                case TokenizerStates.START:\n                    this.offset += 1;\n                    if (this.separatorBytes && n === this.separatorBytes[0]) {\n                        if (this.separatorBytes.length === 1) {\n                            this.state = TokenizerStates.START;\n                            this.onToken(constants_1.TokenType.SEPARATOR, this.separator, this.offset + this.separatorBytes.length - 1);\n                            continue;\n                        }\n                        this.state = TokenizerStates.SEPARATOR;\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.SPACE ||\n                        n === utf_8_1.charset.NEWLINE ||\n                        n === utf_8_1.charset.CARRIAGE_RETURN ||\n                        n === utf_8_1.charset.TAB) {\n                        // whitespace\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.LEFT_CURLY_BRACKET) {\n                        this.onToken(LEFT_BRACE, \"{\", this.offset);\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.RIGHT_CURLY_BRACKET) {\n                        this.onToken(RIGHT_BRACE, \"}\", this.offset);\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.LEFT_SQUARE_BRACKET) {\n                        this.onToken(LEFT_BRACKET, \"[\", this.offset);\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.RIGHT_SQUARE_BRACKET) {\n                        this.onToken(RIGHT_BRACKET, \"]\", this.offset);\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.COLON) {\n                        this.onToken(COLON, \":\", this.offset);\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.COMMA) {\n                        this.onToken(COMMA, \",\", this.offset);\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_T) {\n                        this.state = TokenizerStates.TRUE1;\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_F) {\n                        this.state = TokenizerStates.FALSE1;\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_N) {\n                        this.state = TokenizerStates.NULL1;\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.QUOTATION_MARK) {\n                        this.bufferedString.reset();\n                        this.state = TokenizerStates.STRING_DEFAULT;\n                        continue;\n                    }\n                    if (n >= utf_8_1.charset.DIGIT_ONE && n <= utf_8_1.charset.DIGIT_NINE) {\n                        this.bufferedNumber.reset();\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO;\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.DIGIT_ZERO) {\n                        this.bufferedNumber.reset();\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_INITIAL_ZERO;\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.HYPHEN_MINUS) {\n                        this.bufferedNumber.reset();\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_INITIAL_MINUS;\n                        continue;\n                    }\n                    break;\n                // STRING\n                case TokenizerStates.STRING_DEFAULT:\n                    if (n === utf_8_1.charset.QUOTATION_MARK) {\n                        const string = this.bufferedString.toString();\n                        this.state = TokenizerStates.START;\n                        this.onToken(STRING, string, this.offset);\n                        this.offset += this.bufferedString.byteLength + 1;\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.REVERSE_SOLIDUS) {\n                        this.state = TokenizerStates.STRING_AFTER_BACKSLASH;\n                        continue;\n                    }\n                    if (n >= 128) {\n                        // Parse multi byte (>=128) chars one at a time\n                        if (n >= 194 && n <= 223) {\n                            this.bytes_in_sequence = 2;\n                        }\n                        else if (n <= 239) {\n                            this.bytes_in_sequence = 3;\n                        }\n                        else {\n                            this.bytes_in_sequence = 4;\n                        }\n                        if (this.bytes_in_sequence <= buffer.length - i) {\n                            // if bytes needed to complete char fall outside buffer length, we have a boundary split\n                            this.bufferedString.appendBuf(buffer, i, i + this.bytes_in_sequence);\n                            i += this.bytes_in_sequence - 1;\n                            continue;\n                        }\n                        this.bytes_remaining = i + this.bytes_in_sequence - buffer.length;\n                        this.char_split_buffer.set(buffer.subarray(i));\n                        i = buffer.length - 1;\n                        this.state = TokenizerStates.STRING_INCOMPLETE_CHAR;\n                        continue;\n                    }\n                    if (n >= utf_8_1.charset.SPACE) {\n                        this.bufferedString.appendChar(n);\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.STRING_INCOMPLETE_CHAR:\n                    // check for carry over of a multi byte char split between data chunks\n                    // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n                    this.char_split_buffer.set(buffer.subarray(i, i + this.bytes_remaining), this.bytes_in_sequence - this.bytes_remaining);\n                    this.bufferedString.appendBuf(this.char_split_buffer, 0, this.bytes_in_sequence);\n                    i = this.bytes_remaining - 1;\n                    this.state = TokenizerStates.STRING_DEFAULT;\n                    continue;\n                case TokenizerStates.STRING_AFTER_BACKSLASH:\n                    const controlChar = utf_8_1.escapedSequences[n];\n                    if (controlChar) {\n                        this.bufferedString.appendChar(controlChar);\n                        this.state = TokenizerStates.STRING_DEFAULT;\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_U) {\n                        this.unicode = \"\";\n                        this.state = TokenizerStates.STRING_UNICODE_DIGIT_1;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.STRING_UNICODE_DIGIT_1:\n                case TokenizerStates.STRING_UNICODE_DIGIT_2:\n                case TokenizerStates.STRING_UNICODE_DIGIT_3:\n                    if ((n >= utf_8_1.charset.DIGIT_ZERO && n <= utf_8_1.charset.DIGIT_NINE) ||\n                        (n >= utf_8_1.charset.LATIN_CAPITAL_LETTER_A &&\n                            n <= utf_8_1.charset.LATIN_CAPITAL_LETTER_F) ||\n                        (n >= utf_8_1.charset.LATIN_SMALL_LETTER_A &&\n                            n <= utf_8_1.charset.LATIN_SMALL_LETTER_F)) {\n                        this.unicode += String.fromCharCode(n);\n                        this.state += 1;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.STRING_UNICODE_DIGIT_4:\n                    if ((n >= utf_8_1.charset.DIGIT_ZERO && n <= utf_8_1.charset.DIGIT_NINE) ||\n                        (n >= utf_8_1.charset.LATIN_CAPITAL_LETTER_A &&\n                            n <= utf_8_1.charset.LATIN_CAPITAL_LETTER_F) ||\n                        (n >= utf_8_1.charset.LATIN_SMALL_LETTER_A &&\n                            n <= utf_8_1.charset.LATIN_SMALL_LETTER_F)) {\n                        const intVal = parseInt(this.unicode + String.fromCharCode(n), 16);\n                        if (this.highSurrogate === undefined) {\n                            if (intVal >= 0xd800 && intVal <= 0xdbff) {\n                                //<55296,56319> - highSurrogate\n                                this.highSurrogate = intVal;\n                            }\n                            else {\n                                this.bufferedString.appendBuf(this.encoder.encode(String.fromCharCode(intVal)));\n                            }\n                        }\n                        else {\n                            if (intVal >= 0xdc00 && intVal <= 0xdfff) {\n                                //<56320,57343> - lowSurrogate\n                                this.bufferedString.appendBuf(this.encoder.encode(String.fromCharCode(this.highSurrogate, intVal)));\n                            }\n                            else {\n                                this.bufferedString.appendBuf(this.encoder.encode(String.fromCharCode(this.highSurrogate)));\n                            }\n                            this.highSurrogate = undefined;\n                        }\n                        this.state = TokenizerStates.STRING_DEFAULT;\n                        continue;\n                    }\n                // Number\n                case TokenizerStates.NUMBER_AFTER_INITIAL_MINUS:\n                    if (n === utf_8_1.charset.DIGIT_ZERO) {\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_INITIAL_ZERO;\n                        continue;\n                    }\n                    if (n >= utf_8_1.charset.DIGIT_ONE && n <= utf_8_1.charset.DIGIT_NINE) {\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.NUMBER_AFTER_INITIAL_ZERO:\n                    if (n === utf_8_1.charset.FULL_STOP) {\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_FULL_STOP;\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_E ||\n                        n === utf_8_1.charset.LATIN_CAPITAL_LETTER_E) {\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_E;\n                        continue;\n                    }\n                    i -= 1;\n                    this.state = TokenizerStates.START;\n                    this.emitNumber();\n                    continue;\n                case TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO:\n                    if (n >= utf_8_1.charset.DIGIT_ZERO && n <= utf_8_1.charset.DIGIT_NINE) {\n                        this.bufferedNumber.appendChar(n);\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.FULL_STOP) {\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_FULL_STOP;\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_E ||\n                        n === utf_8_1.charset.LATIN_CAPITAL_LETTER_E) {\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_E;\n                        continue;\n                    }\n                    i -= 1;\n                    this.state = TokenizerStates.START;\n                    this.emitNumber();\n                    continue;\n                case TokenizerStates.NUMBER_AFTER_FULL_STOP:\n                    if (n >= utf_8_1.charset.DIGIT_ZERO && n <= utf_8_1.charset.DIGIT_NINE) {\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_DECIMAL;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.NUMBER_AFTER_DECIMAL:\n                    if (n >= utf_8_1.charset.DIGIT_ZERO && n <= utf_8_1.charset.DIGIT_NINE) {\n                        this.bufferedNumber.appendChar(n);\n                        continue;\n                    }\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_E ||\n                        n === utf_8_1.charset.LATIN_CAPITAL_LETTER_E) {\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_E;\n                        continue;\n                    }\n                    i -= 1;\n                    this.state = TokenizerStates.START;\n                    this.emitNumber();\n                    continue;\n                case TokenizerStates.NUMBER_AFTER_E:\n                    if (n === utf_8_1.charset.PLUS_SIGN || n === utf_8_1.charset.HYPHEN_MINUS) {\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_E_AND_SIGN;\n                        continue;\n                    }\n                // Allow cascading\n                case TokenizerStates.NUMBER_AFTER_E_AND_SIGN:\n                    if (n >= utf_8_1.charset.DIGIT_ZERO && n <= utf_8_1.charset.DIGIT_NINE) {\n                        this.bufferedNumber.appendChar(n);\n                        this.state = TokenizerStates.NUMBER_AFTER_E_AND_DIGIT;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.NUMBER_AFTER_E_AND_DIGIT:\n                    if (n >= utf_8_1.charset.DIGIT_ZERO && n <= utf_8_1.charset.DIGIT_NINE) {\n                        this.bufferedNumber.appendChar(n);\n                        continue;\n                    }\n                    i -= 1;\n                    this.state = TokenizerStates.START;\n                    this.emitNumber();\n                    continue;\n                // TRUE\n                case TokenizerStates.TRUE1:\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_R) {\n                        this.state = TokenizerStates.TRUE2;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.TRUE2:\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_U) {\n                        this.state = TokenizerStates.TRUE3;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.TRUE3:\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_E) {\n                        this.state = TokenizerStates.START;\n                        this.onToken(TRUE, true, this.offset);\n                        this.offset += 3;\n                        continue;\n                    }\n                    break;\n                // FALSE\n                case TokenizerStates.FALSE1:\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_A) {\n                        this.state = TokenizerStates.FALSE2;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.FALSE2:\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_L) {\n                        this.state = TokenizerStates.FALSE3;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.FALSE3:\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_S) {\n                        this.state = TokenizerStates.FALSE4;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.FALSE4:\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_E) {\n                        this.state = TokenizerStates.START;\n                        this.onToken(FALSE, false, this.offset);\n                        this.offset += 4;\n                        continue;\n                    }\n                    break;\n                // NULL\n                case TokenizerStates.NULL1:\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_U) {\n                        this.state = TokenizerStates.NULL2;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.NULL2:\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_L) {\n                        this.state = TokenizerStates.NULL3;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.NULL3:\n                    if (n === utf_8_1.charset.LATIN_SMALL_LETTER_L) {\n                        this.state = TokenizerStates.START;\n                        this.onToken(NULL, null, this.offset);\n                        this.offset += 3;\n                        continue;\n                    }\n                    break;\n                case TokenizerStates.SEPARATOR:\n                    this.separatorIndex += 1;\n                    if (!this.separatorBytes ||\n                        n !== this.separatorBytes[this.separatorIndex]) {\n                        break;\n                    }\n                    if (this.separatorIndex === this.separatorBytes.length - 1) {\n                        this.state = TokenizerStates.START;\n                        this.onToken(constants_1.TokenType.SEPARATOR, this.separator, this.offset + this.separatorIndex);\n                        this.separatorIndex = 0;\n                    }\n                    continue;\n                case TokenizerStates.ENDED:\n                    if (n === utf_8_1.charset.SPACE ||\n                        n === utf_8_1.charset.NEWLINE ||\n                        n === utf_8_1.charset.CARRIAGE_RETURN ||\n                        n === utf_8_1.charset.TAB) {\n                        // whitespace\n                        continue;\n                    }\n            }\n            this.error(new TokenizerError(`Unexpected \"${String.fromCharCode(n)}\" at position \"${i}\" in state ${TokenizerStates[this.state]}`));\n            return;\n        }\n    }\n    emitNumber() {\n        this.onToken(NUMBER, this.parseNumber(this.bufferedNumber.toString()), this.offset);\n        this.offset += this.bufferedNumber.byteLength - 1;\n    }\n    parseNumber(numberStr) {\n        return Number(numberStr);\n    }\n    error(err) {\n        if (this.state !== TokenizerStates.ENDED) {\n            this.state = TokenizerStates.ERROR;\n        }\n        this.onError(err);\n    }\n    end() {\n        switch (this.state) {\n            case TokenizerStates.NUMBER_AFTER_INITIAL_ZERO:\n            case TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO:\n            case TokenizerStates.NUMBER_AFTER_DECIMAL:\n            case TokenizerStates.NUMBER_AFTER_E_AND_DIGIT:\n                this.state = TokenizerStates.ENDED;\n                this.emitNumber();\n                this.onEnd();\n                break;\n            case TokenizerStates.START:\n            case TokenizerStates.ERROR:\n            case TokenizerStates.SEPARATOR:\n                this.state = TokenizerStates.ENDED;\n                this.onEnd();\n                break;\n            default:\n                this.error(new TokenizerError(`Tokenizer ended in the middle of a token (state: ${TokenizerStates[this.state]}). Either not all the data was received or the data was invalid.`));\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToken(token, value, offset) {\n        // Override me\n        throw new TokenizerError('Can\\'t emit tokens before the \"onToken\" callback has been set up.');\n    }\n    onError(err) {\n        // Override me\n        throw err;\n    }\n    onEnd() {\n        // Override me\n    }\n}\nexports[\"default\"] = Tokenizer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@streamparser/json/dist/cjs/tokenizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@streamparser/json/dist/cjs/tokenparser.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@streamparser/json/dist/cjs/tokenparser.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenParserError = exports.TokenParserMode = void 0;\nconst constants_1 = __webpack_require__(/*! ./utils/constants */ \"(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/constants.js\");\nconst { LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET, COLON, COMMA, TRUE, FALSE, NULL, STRING, NUMBER, SEPARATOR, } = constants_1.TokenType;\n// Parser States\nvar TokenParserState;\n(function (TokenParserState) {\n    TokenParserState[TokenParserState[\"VALUE\"] = 0] = \"VALUE\";\n    TokenParserState[TokenParserState[\"KEY\"] = 1] = \"KEY\";\n    TokenParserState[TokenParserState[\"COLON\"] = 2] = \"COLON\";\n    TokenParserState[TokenParserState[\"COMMA\"] = 3] = \"COMMA\";\n    TokenParserState[TokenParserState[\"ENDED\"] = 4] = \"ENDED\";\n    TokenParserState[TokenParserState[\"ERROR\"] = 5] = \"ERROR\";\n    TokenParserState[TokenParserState[\"SEPARATOR\"] = 6] = \"SEPARATOR\";\n})(TokenParserState || (TokenParserState = {}));\n// Parser Modes\nvar TokenParserMode;\n(function (TokenParserMode) {\n    TokenParserMode[TokenParserMode[\"OBJECT\"] = 0] = \"OBJECT\";\n    TokenParserMode[TokenParserMode[\"ARRAY\"] = 1] = \"ARRAY\";\n})(TokenParserMode = exports.TokenParserMode || (exports.TokenParserMode = {}));\nconst defaultOpts = {\n    paths: undefined,\n    keepStack: true,\n    separator: undefined,\n};\nclass TokenParserError extends Error {\n    constructor(message) {\n        super(message);\n        // Typescript is broken. This is a workaround\n        Object.setPrototypeOf(this, TokenParserError.prototype);\n    }\n}\nexports.TokenParserError = TokenParserError;\nclass TokenParser {\n    constructor(opts) {\n        this.state = TokenParserState.VALUE;\n        this.mode = undefined;\n        this.key = undefined;\n        this.value = undefined;\n        this.stack = [];\n        opts = Object.assign(Object.assign({}, defaultOpts), opts);\n        if (opts.paths) {\n            this.paths = opts.paths.map((path) => {\n                if (path === undefined || path === \"$*\")\n                    return undefined;\n                if (!path.startsWith(\"$\"))\n                    throw new TokenParserError(`Invalid selector \"${path}\". Should start with \"$\".`);\n                const pathParts = path.split(\".\").slice(1);\n                if (pathParts.includes(\"\"))\n                    throw new TokenParserError(`Invalid selector \"${path}\". \"..\" syntax not supported.`);\n                return pathParts;\n            });\n        }\n        this.keepStack = opts.keepStack;\n        this.separator = opts.separator;\n    }\n    shouldEmit() {\n        if (!this.paths)\n            return true;\n        return this.paths.some((path) => {\n            var _a;\n            if (path === undefined)\n                return true;\n            if (path.length !== this.stack.length)\n                return false;\n            for (let i = 0; i < path.length - 1; i++) {\n                const selector = path[i];\n                const key = this.stack[i + 1].key;\n                if (selector === \"*\")\n                    continue;\n                if (selector !== key)\n                    return false;\n            }\n            const selector = path[path.length - 1];\n            if (selector === \"*\")\n                return true;\n            return selector === ((_a = this.key) === null || _a === void 0 ? void 0 : _a.toString());\n        });\n    }\n    push() {\n        this.stack.push({\n            key: this.key,\n            value: this.value,\n            mode: this.mode,\n            emit: this.shouldEmit(),\n        });\n    }\n    pop() {\n        const value = this.value;\n        let emit;\n        ({\n            key: this.key,\n            value: this.value,\n            mode: this.mode,\n            emit,\n        } = this.stack.pop());\n        this.state =\n            this.mode !== undefined ? TokenParserState.COMMA : TokenParserState.VALUE;\n        this.emit(value, emit);\n    }\n    emit(value, emit) {\n        if (!this.keepStack &&\n            this.value &&\n            this.stack.every((item) => !item.emit)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            delete this.value[this.key];\n        }\n        if (emit) {\n            this.onValue(value, \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.key, \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.value, this.stack);\n        }\n        if (this.stack.length === 0) {\n            if (this.separator) {\n                this.state = TokenParserState.SEPARATOR;\n            }\n            else if (this.separator === undefined) {\n                this.end();\n            }\n            // else if separator === '', expect next JSON object.\n        }\n    }\n    get isEnded() {\n        return this.state === TokenParserState.ENDED;\n    }\n    write(token, value) {\n        if (this.state === TokenParserState.VALUE) {\n            if (token === STRING ||\n                token === NUMBER ||\n                token === TRUE ||\n                token === FALSE ||\n                token === NULL) {\n                if (this.mode === TokenParserMode.OBJECT) {\n                    this.value[this.key] = value;\n                    this.state = TokenParserState.COMMA;\n                }\n                else if (this.mode === TokenParserMode.ARRAY) {\n                    this.value.push(value);\n                    this.state = TokenParserState.COMMA;\n                }\n                this.emit(value, this.shouldEmit());\n                return;\n            }\n            if (token === LEFT_BRACE) {\n                this.push();\n                if (this.mode === TokenParserMode.OBJECT) {\n                    this.value = this.value[this.key] = {};\n                }\n                else if (this.mode === TokenParserMode.ARRAY) {\n                    const val = {};\n                    this.value.push(val);\n                    this.value = val;\n                }\n                else {\n                    this.value = {};\n                }\n                this.mode = TokenParserMode.OBJECT;\n                this.state = TokenParserState.KEY;\n                this.key = undefined;\n                return;\n            }\n            if (token === LEFT_BRACKET) {\n                this.push();\n                if (this.mode === TokenParserMode.OBJECT) {\n                    this.value = this.value[this.key] = [];\n                }\n                else if (this.mode === TokenParserMode.ARRAY) {\n                    const val = [];\n                    this.value.push(val);\n                    this.value = val;\n                }\n                else {\n                    this.value = [];\n                }\n                this.mode = TokenParserMode.ARRAY;\n                this.state = TokenParserState.VALUE;\n                this.key = 0;\n                return;\n            }\n            if (this.mode === TokenParserMode.ARRAY &&\n                token === RIGHT_BRACKET &&\n                this.value.length === 0) {\n                this.pop();\n                return;\n            }\n        }\n        if (this.state === TokenParserState.KEY) {\n            if (token === STRING) {\n                this.key = value;\n                this.state = TokenParserState.COLON;\n                return;\n            }\n            if (token === RIGHT_BRACE &&\n                Object.keys(this.value).length === 0) {\n                this.pop();\n                return;\n            }\n        }\n        if (this.state === TokenParserState.COLON) {\n            if (token === COLON) {\n                this.state = TokenParserState.VALUE;\n                return;\n            }\n        }\n        if (this.state === TokenParserState.COMMA) {\n            if (token === COMMA) {\n                if (this.mode === TokenParserMode.ARRAY) {\n                    this.state = TokenParserState.VALUE;\n                    this.key += 1;\n                    return;\n                }\n                /* istanbul ignore else */\n                if (this.mode === TokenParserMode.OBJECT) {\n                    this.state = TokenParserState.KEY;\n                    return;\n                }\n            }\n            if ((token === RIGHT_BRACE && this.mode === TokenParserMode.OBJECT) ||\n                (token === RIGHT_BRACKET && this.mode === TokenParserMode.ARRAY)) {\n                this.pop();\n                return;\n            }\n        }\n        if (this.state === TokenParserState.SEPARATOR) {\n            if (token === SEPARATOR && value === this.separator) {\n                this.state = TokenParserState.VALUE;\n                return;\n            }\n        }\n        this.error(new TokenParserError(`Unexpected ${constants_1.TokenType[token]} (${JSON.stringify(value)}) in state ${TokenParserState[this.state]}`));\n    }\n    error(err) {\n        if (this.state !== TokenParserState.ENDED) {\n            this.state = TokenParserState.ERROR;\n        }\n        this.onError(err);\n    }\n    end() {\n        if ((this.state !== TokenParserState.VALUE &&\n            this.state !== TokenParserState.SEPARATOR) ||\n            this.stack.length > 0) {\n            this.error(new Error(`Parser ended in mid-parsing (state: ${TokenParserState[this.state]}). Either not all the data was received or the data was invalid.`));\n        }\n        else {\n            this.state = TokenParserState.ENDED;\n            this.onEnd();\n        }\n    }\n    onValue(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    value, key, parent, stack\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ) {\n        // Override me\n        throw new TokenParserError('Can\\'t emit data before the \"onValue\" callback has been set up.');\n    }\n    onError(err) {\n        // Override me\n        throw err;\n    }\n    onEnd() {\n        // Override me\n    }\n}\nexports[\"default\"] = TokenParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@streamparser/json/dist/cjs/tokenparser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/bufferedString.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@streamparser/json/dist/cjs/utils/bufferedString.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BufferedString = exports.NonBufferedString = void 0;\nclass NonBufferedString {\n    constructor() {\n        this.decoder = new TextDecoder(\"utf-8\");\n        this.string = \"\";\n        this.byteLength = 0;\n    }\n    appendChar(char) {\n        this.string += String.fromCharCode(char);\n        this.byteLength += 1;\n    }\n    appendBuf(buf, start = 0, end = buf.length) {\n        this.string += this.decoder.decode(buf.subarray(start, end));\n        this.byteLength += end - start;\n    }\n    reset() {\n        this.string = \"\";\n        this.byteLength = 0;\n    }\n    toString() {\n        return this.string;\n    }\n}\nexports.NonBufferedString = NonBufferedString;\nclass BufferedString {\n    constructor(bufferSize) {\n        this.decoder = new TextDecoder(\"utf-8\");\n        this.bufferOffset = 0;\n        this.string = \"\";\n        this.byteLength = 0;\n        this.buffer = new Uint8Array(bufferSize);\n    }\n    appendChar(char) {\n        if (this.bufferOffset >= this.buffer.length)\n            this.flushStringBuffer();\n        this.buffer[this.bufferOffset++] = char;\n        this.byteLength += 1;\n    }\n    appendBuf(buf, start = 0, end = buf.length) {\n        const size = end - start;\n        if (this.bufferOffset + size > this.buffer.length)\n            this.flushStringBuffer();\n        this.buffer.set(buf.subarray(start, end), this.bufferOffset);\n        this.bufferOffset += size;\n        this.byteLength += size;\n    }\n    flushStringBuffer() {\n        this.string += this.decoder.decode(this.buffer.subarray(0, this.bufferOffset));\n        this.bufferOffset = 0;\n    }\n    reset() {\n        this.string = \"\";\n        this.bufferOffset = 0;\n        this.byteLength = 0;\n    }\n    toString() {\n        this.flushStringBuffer();\n        return this.string;\n    }\n}\nexports.BufferedString = BufferedString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbXBhcnNlci9qc29uL2Rpc3QvY2pzL3V0aWxzL2J1ZmZlcmVkU3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLHlCQUF5QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3RyZWFtcGFyc2VyL2pzb24vZGlzdC9janMvdXRpbHMvYnVmZmVyZWRTdHJpbmcuanM/ZTE0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVmZmVyZWRTdHJpbmcgPSBleHBvcnRzLk5vbkJ1ZmZlcmVkU3RyaW5nID0gdm9pZCAwO1xuY2xhc3MgTm9uQnVmZmVyZWRTdHJpbmcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKTtcbiAgICAgICAgdGhpcy5zdHJpbmcgPSBcIlwiO1xuICAgICAgICB0aGlzLmJ5dGVMZW5ndGggPSAwO1xuICAgIH1cbiAgICBhcHBlbmRDaGFyKGNoYXIpIHtcbiAgICAgICAgdGhpcy5zdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyKTtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoICs9IDE7XG4gICAgfVxuICAgIGFwcGVuZEJ1ZihidWYsIHN0YXJ0ID0gMCwgZW5kID0gYnVmLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnN0cmluZyArPSB0aGlzLmRlY29kZXIuZGVjb2RlKGJ1Zi5zdWJhcnJheShzdGFydCwgZW5kKSk7XG4gICAgICAgIHRoaXMuYnl0ZUxlbmd0aCArPSBlbmQgLSBzdGFydDtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuc3RyaW5nID0gXCJcIjtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gMDtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmluZztcbiAgICB9XG59XG5leHBvcnRzLk5vbkJ1ZmZlcmVkU3RyaW5nID0gTm9uQnVmZmVyZWRTdHJpbmc7XG5jbGFzcyBCdWZmZXJlZFN0cmluZyB7XG4gICAgY29uc3RydWN0b3IoYnVmZmVyU2l6ZSkge1xuICAgICAgICB0aGlzLmRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKTtcbiAgICAgICAgdGhpcy5idWZmZXJPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHRoaXMuYnl0ZUxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyU2l6ZSk7XG4gICAgfVxuICAgIGFwcGVuZENoYXIoY2hhcikge1xuICAgICAgICBpZiAodGhpcy5idWZmZXJPZmZzZXQgPj0gdGhpcy5idWZmZXIubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5mbHVzaFN0cmluZ0J1ZmZlcigpO1xuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZnNldCsrXSA9IGNoYXI7XG4gICAgICAgIHRoaXMuYnl0ZUxlbmd0aCArPSAxO1xuICAgIH1cbiAgICBhcHBlbmRCdWYoYnVmLCBzdGFydCA9IDAsIGVuZCA9IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICBpZiAodGhpcy5idWZmZXJPZmZzZXQgKyBzaXplID4gdGhpcy5idWZmZXIubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5mbHVzaFN0cmluZ0J1ZmZlcigpO1xuICAgICAgICB0aGlzLmJ1ZmZlci5zZXQoYnVmLnN1YmFycmF5KHN0YXJ0LCBlbmQpLCB0aGlzLmJ1ZmZlck9mZnNldCk7XG4gICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ICs9IHNpemU7XG4gICAgICAgIHRoaXMuYnl0ZUxlbmd0aCArPSBzaXplO1xuICAgIH1cbiAgICBmbHVzaFN0cmluZ0J1ZmZlcigpIHtcbiAgICAgICAgdGhpcy5zdHJpbmcgKz0gdGhpcy5kZWNvZGVyLmRlY29kZSh0aGlzLmJ1ZmZlci5zdWJhcnJheSgwLCB0aGlzLmJ1ZmZlck9mZnNldCkpO1xuICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCA9IDA7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gMDtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHRoaXMuZmx1c2hTdHJpbmdCdWZmZXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nO1xuICAgIH1cbn1cbmV4cG9ydHMuQnVmZmVyZWRTdHJpbmcgPSBCdWZmZXJlZFN0cmluZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/bufferedString.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/constants.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@streamparser/json/dist/cjs/utils/constants.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenType = void 0;\nvar TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"LEFT_BRACE\"] = 1] = \"LEFT_BRACE\";\n    TokenType[TokenType[\"RIGHT_BRACE\"] = 2] = \"RIGHT_BRACE\";\n    TokenType[TokenType[\"LEFT_BRACKET\"] = 3] = \"LEFT_BRACKET\";\n    TokenType[TokenType[\"RIGHT_BRACKET\"] = 4] = \"RIGHT_BRACKET\";\n    TokenType[TokenType[\"COLON\"] = 5] = \"COLON\";\n    TokenType[TokenType[\"COMMA\"] = 6] = \"COMMA\";\n    TokenType[TokenType[\"TRUE\"] = 7] = \"TRUE\";\n    TokenType[TokenType[\"FALSE\"] = 8] = \"FALSE\";\n    TokenType[TokenType[\"NULL\"] = 9] = \"NULL\";\n    TokenType[TokenType[\"STRING\"] = 10] = \"STRING\";\n    TokenType[TokenType[\"NUMBER\"] = 11] = \"NUMBER\";\n    TokenType[TokenType[\"SEPARATOR\"] = 12] = \"SEPARATOR\";\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbXBhcnNlci9qc29uL2Rpc3QvY2pzL3V0aWxzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0NBQW9DLGlCQUFpQixLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN0cmVhbXBhcnNlci9qc29uL2Rpc3QvY2pzL3V0aWxzL2NvbnN0YW50cy5qcz8yMjhmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ub2tlblR5cGUgPSB2b2lkIDA7XG52YXIgVG9rZW5UeXBlO1xuKGZ1bmN0aW9uIChUb2tlblR5cGUpIHtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiTEVGVF9CUkFDRVwiXSA9IDFdID0gXCJMRUZUX0JSQUNFXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIlJJR0hUX0JSQUNFXCJdID0gMl0gPSBcIlJJR0hUX0JSQUNFXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIkxFRlRfQlJBQ0tFVFwiXSA9IDNdID0gXCJMRUZUX0JSQUNLRVRcIjtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiUklHSFRfQlJBQ0tFVFwiXSA9IDRdID0gXCJSSUdIVF9CUkFDS0VUXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIkNPTE9OXCJdID0gNV0gPSBcIkNPTE9OXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIkNPTU1BXCJdID0gNl0gPSBcIkNPTU1BXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIlRSVUVcIl0gPSA3XSA9IFwiVFJVRVwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJGQUxTRVwiXSA9IDhdID0gXCJGQUxTRVwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJOVUxMXCJdID0gOV0gPSBcIk5VTExcIjtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiU1RSSU5HXCJdID0gMTBdID0gXCJTVFJJTkdcIjtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiTlVNQkVSXCJdID0gMTFdID0gXCJOVU1CRVJcIjtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiU0VQQVJBVE9SXCJdID0gMTJdID0gXCJTRVBBUkFUT1JcIjtcbn0pKFRva2VuVHlwZSA9IGV4cG9ydHMuVG9rZW5UeXBlIHx8IChleHBvcnRzLlRva2VuVHlwZSA9IHt9KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/utf-8.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@streamparser/json/dist/cjs/utils/utf-8.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.escapedSequences = exports.charset = void 0;\nvar charset;\n(function (charset) {\n    charset[charset[\"BACKSPACE\"] = 8] = \"BACKSPACE\";\n    charset[charset[\"FORM_FEED\"] = 12] = \"FORM_FEED\";\n    charset[charset[\"NEWLINE\"] = 10] = \"NEWLINE\";\n    charset[charset[\"CARRIAGE_RETURN\"] = 13] = \"CARRIAGE_RETURN\";\n    charset[charset[\"TAB\"] = 9] = \"TAB\";\n    charset[charset[\"SPACE\"] = 32] = \"SPACE\";\n    charset[charset[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    charset[charset[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\n    charset[charset[\"NUMBER_SIGN\"] = 35] = \"NUMBER_SIGN\";\n    charset[charset[\"DOLLAR_SIGN\"] = 36] = \"DOLLAR_SIGN\";\n    charset[charset[\"PERCENT_SIGN\"] = 37] = \"PERCENT_SIGN\";\n    charset[charset[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    charset[charset[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\n    charset[charset[\"LEFT_PARENTHESIS\"] = 40] = \"LEFT_PARENTHESIS\";\n    charset[charset[\"RIGHT_PARENTHESIS\"] = 41] = \"RIGHT_PARENTHESIS\";\n    charset[charset[\"ASTERISK\"] = 42] = \"ASTERISK\";\n    charset[charset[\"PLUS_SIGN\"] = 43] = \"PLUS_SIGN\";\n    charset[charset[\"COMMA\"] = 44] = \"COMMA\";\n    charset[charset[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\n    charset[charset[\"FULL_STOP\"] = 46] = \"FULL_STOP\";\n    charset[charset[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\n    charset[charset[\"DIGIT_ZERO\"] = 48] = \"DIGIT_ZERO\";\n    charset[charset[\"DIGIT_ONE\"] = 49] = \"DIGIT_ONE\";\n    charset[charset[\"DIGIT_TWO\"] = 50] = \"DIGIT_TWO\";\n    charset[charset[\"DIGIT_THREE\"] = 51] = \"DIGIT_THREE\";\n    charset[charset[\"DIGIT_FOUR\"] = 52] = \"DIGIT_FOUR\";\n    charset[charset[\"DIGIT_FIVE\"] = 53] = \"DIGIT_FIVE\";\n    charset[charset[\"DIGIT_SIX\"] = 54] = \"DIGIT_SIX\";\n    charset[charset[\"DIGIT_SEVEN\"] = 55] = \"DIGIT_SEVEN\";\n    charset[charset[\"DIGIT_EIGHT\"] = 56] = \"DIGIT_EIGHT\";\n    charset[charset[\"DIGIT_NINE\"] = 57] = \"DIGIT_NINE\";\n    charset[charset[\"COLON\"] = 58] = \"COLON\";\n    charset[charset[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    charset[charset[\"LESS_THAN_SIGN\"] = 60] = \"LESS_THAN_SIGN\";\n    charset[charset[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\n    charset[charset[\"GREATER_THAN_SIGN\"] = 62] = \"GREATER_THAN_SIGN\";\n    charset[charset[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    charset[charset[\"COMMERCIAL_AT\"] = 64] = \"COMMERCIAL_AT\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_A\"] = 65] = \"LATIN_CAPITAL_LETTER_A\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_B\"] = 66] = \"LATIN_CAPITAL_LETTER_B\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_C\"] = 67] = \"LATIN_CAPITAL_LETTER_C\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_D\"] = 68] = \"LATIN_CAPITAL_LETTER_D\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_E\"] = 69] = \"LATIN_CAPITAL_LETTER_E\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_F\"] = 70] = \"LATIN_CAPITAL_LETTER_F\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_G\"] = 71] = \"LATIN_CAPITAL_LETTER_G\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_H\"] = 72] = \"LATIN_CAPITAL_LETTER_H\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_I\"] = 73] = \"LATIN_CAPITAL_LETTER_I\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_J\"] = 74] = \"LATIN_CAPITAL_LETTER_J\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_K\"] = 75] = \"LATIN_CAPITAL_LETTER_K\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_L\"] = 76] = \"LATIN_CAPITAL_LETTER_L\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_M\"] = 77] = \"LATIN_CAPITAL_LETTER_M\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_N\"] = 78] = \"LATIN_CAPITAL_LETTER_N\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_O\"] = 79] = \"LATIN_CAPITAL_LETTER_O\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_P\"] = 80] = \"LATIN_CAPITAL_LETTER_P\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_Q\"] = 81] = \"LATIN_CAPITAL_LETTER_Q\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_R\"] = 82] = \"LATIN_CAPITAL_LETTER_R\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_S\"] = 83] = \"LATIN_CAPITAL_LETTER_S\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_T\"] = 84] = \"LATIN_CAPITAL_LETTER_T\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_U\"] = 85] = \"LATIN_CAPITAL_LETTER_U\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_V\"] = 86] = \"LATIN_CAPITAL_LETTER_V\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_W\"] = 87] = \"LATIN_CAPITAL_LETTER_W\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_X\"] = 88] = \"LATIN_CAPITAL_LETTER_X\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_Y\"] = 89] = \"LATIN_CAPITAL_LETTER_Y\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_Z\"] = 90] = \"LATIN_CAPITAL_LETTER_Z\";\n    charset[charset[\"LEFT_SQUARE_BRACKET\"] = 91] = \"LEFT_SQUARE_BRACKET\";\n    charset[charset[\"REVERSE_SOLIDUS\"] = 92] = \"REVERSE_SOLIDUS\";\n    charset[charset[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\n    charset[charset[\"CIRCUMFLEX_ACCENT\"] = 94] = \"CIRCUMFLEX_ACCENT\";\n    charset[charset[\"LOW_LINE\"] = 95] = \"LOW_LINE\";\n    charset[charset[\"GRAVE_ACCENT\"] = 96] = \"GRAVE_ACCENT\";\n    charset[charset[\"LATIN_SMALL_LETTER_A\"] = 97] = \"LATIN_SMALL_LETTER_A\";\n    charset[charset[\"LATIN_SMALL_LETTER_B\"] = 98] = \"LATIN_SMALL_LETTER_B\";\n    charset[charset[\"LATIN_SMALL_LETTER_C\"] = 99] = \"LATIN_SMALL_LETTER_C\";\n    charset[charset[\"LATIN_SMALL_LETTER_D\"] = 100] = \"LATIN_SMALL_LETTER_D\";\n    charset[charset[\"LATIN_SMALL_LETTER_E\"] = 101] = \"LATIN_SMALL_LETTER_E\";\n    charset[charset[\"LATIN_SMALL_LETTER_F\"] = 102] = \"LATIN_SMALL_LETTER_F\";\n    charset[charset[\"LATIN_SMALL_LETTER_G\"] = 103] = \"LATIN_SMALL_LETTER_G\";\n    charset[charset[\"LATIN_SMALL_LETTER_H\"] = 104] = \"LATIN_SMALL_LETTER_H\";\n    charset[charset[\"LATIN_SMALL_LETTER_I\"] = 105] = \"LATIN_SMALL_LETTER_I\";\n    charset[charset[\"LATIN_SMALL_LETTER_J\"] = 106] = \"LATIN_SMALL_LETTER_J\";\n    charset[charset[\"LATIN_SMALL_LETTER_K\"] = 107] = \"LATIN_SMALL_LETTER_K\";\n    charset[charset[\"LATIN_SMALL_LETTER_L\"] = 108] = \"LATIN_SMALL_LETTER_L\";\n    charset[charset[\"LATIN_SMALL_LETTER_M\"] = 109] = \"LATIN_SMALL_LETTER_M\";\n    charset[charset[\"LATIN_SMALL_LETTER_N\"] = 110] = \"LATIN_SMALL_LETTER_N\";\n    charset[charset[\"LATIN_SMALL_LETTER_O\"] = 111] = \"LATIN_SMALL_LETTER_O\";\n    charset[charset[\"LATIN_SMALL_LETTER_P\"] = 112] = \"LATIN_SMALL_LETTER_P\";\n    charset[charset[\"LATIN_SMALL_LETTER_Q\"] = 113] = \"LATIN_SMALL_LETTER_Q\";\n    charset[charset[\"LATIN_SMALL_LETTER_R\"] = 114] = \"LATIN_SMALL_LETTER_R\";\n    charset[charset[\"LATIN_SMALL_LETTER_S\"] = 115] = \"LATIN_SMALL_LETTER_S\";\n    charset[charset[\"LATIN_SMALL_LETTER_T\"] = 116] = \"LATIN_SMALL_LETTER_T\";\n    charset[charset[\"LATIN_SMALL_LETTER_U\"] = 117] = \"LATIN_SMALL_LETTER_U\";\n    charset[charset[\"LATIN_SMALL_LETTER_V\"] = 118] = \"LATIN_SMALL_LETTER_V\";\n    charset[charset[\"LATIN_SMALL_LETTER_W\"] = 119] = \"LATIN_SMALL_LETTER_W\";\n    charset[charset[\"LATIN_SMALL_LETTER_X\"] = 120] = \"LATIN_SMALL_LETTER_X\";\n    charset[charset[\"LATIN_SMALL_LETTER_Y\"] = 121] = \"LATIN_SMALL_LETTER_Y\";\n    charset[charset[\"LATIN_SMALL_LETTER_Z\"] = 122] = \"LATIN_SMALL_LETTER_Z\";\n    charset[charset[\"LEFT_CURLY_BRACKET\"] = 123] = \"LEFT_CURLY_BRACKET\";\n    charset[charset[\"VERTICAL_LINE\"] = 124] = \"VERTICAL_LINE\";\n    charset[charset[\"RIGHT_CURLY_BRACKET\"] = 125] = \"RIGHT_CURLY_BRACKET\";\n    charset[charset[\"TILDE\"] = 126] = \"TILDE\";\n})(charset = exports.charset || (exports.charset = {}));\nexports.escapedSequences = {\n    [charset.QUOTATION_MARK]: charset.QUOTATION_MARK,\n    [charset.REVERSE_SOLIDUS]: charset.REVERSE_SOLIDUS,\n    [charset.SOLIDUS]: charset.SOLIDUS,\n    [charset.LATIN_SMALL_LETTER_B]: charset.BACKSPACE,\n    [charset.LATIN_SMALL_LETTER_F]: charset.FORM_FEED,\n    [charset.LATIN_SMALL_LETTER_N]: charset.NEWLINE,\n    [charset.LATIN_SMALL_LETTER_R]: charset.CARRIAGE_RETURN,\n    [charset.LATIN_SMALL_LETTER_T]: charset.TAB,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@streamparser/json/dist/cjs/utils/utf-8.js\n");

/***/ })

};
;